/*! tailwindcss v4.0.8 | MIT License | https://tailwindcss.com */
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.z-10 {
  z-index: 10;
}
.z-50 {
  z-index: 50;
}
.container {
  width: 100%;
}
.mt-auto {
  margin-top: auto;
}
.mb-auto {
  margin-bottom: auto;
}
.flex {
  display: flex;
}
.h-3\/4 {
  height: calc(3/4 * 100%);
}
.h-full {
  height: 100%;
}
.h-screen {
  height: 100vh;
}
.w-1\/3 {
  width: calc(1/3 * 100%);
}
.w-3\/4 {
  width: calc(3/4 * 100%);
}
.w-full {
  width: 100%;
}
.w-screen {
  width: 100vw;
}
.flex-none {
  flex: none;
}
.scale-50 {
  --tw-scale-x: 50%;
  --tw-scale-y: 50%;
  --tw-scale-z: 50%;
  scale: var(--tw-scale-x) var(--tw-scale-y);
}
.scale-125 {
  --tw-scale-x: 125%;
  --tw-scale-y: 125%;
  --tw-scale-z: 125%;
  scale: var(--tw-scale-x) var(--tw-scale-y);
}
.scale-150 {
  --tw-scale-x: 150%;
  --tw-scale-y: 150%;
  --tw-scale-z: 150%;
  scale: var(--tw-scale-x) var(--tw-scale-y);
}
.scale-200 {
  --tw-scale-x: 200%;
  --tw-scale-y: 200%;
  --tw-scale-z: 200%;
  scale: var(--tw-scale-x) var(--tw-scale-y);
}
.scale-600 {
  --tw-scale-x: 600%;
  --tw-scale-y: 600%;
  --tw-scale-z: 600%;
  scale: var(--tw-scale-x) var(--tw-scale-y);
}
.transform {
  transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
}
.snap-center {
  scroll-snap-align: center;
}
.snap-start {
  scroll-snap-align: start;
}
.flex-col {
  flex-direction: column;
}
.flex-row {
  flex-direction: row;
}
.flex-row-reverse {
  flex-direction: row-reverse;
}
.items-center {
  align-items: center;
}
.items-start {
  align-items: flex-start;
}
.justify-around {
  justify-content: space-around;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.justify-end {
  justify-content: flex-end;
}
.overflow-x-auto {
  overflow-x: auto;
}
.overflow-x-hidden {
  overflow-x: hidden;
}
.overflow-y-hidden {
  overflow-y: hidden;
}
.bg-cover {
  background-size: cover;
}
.bg-repeat {
  background-repeat: repeat;
}
.text-center {
  text-align: center;
}
.uppercase {
  text-transform: uppercase;
}
.underline {
  text-decoration-line: underline;
}
.filter {
  filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
}
@layer components {
  .section {
    position: relative;
    width: 100vw;
    height: 100vh;
    background-image: url('../assets/element/background.webp');
  }
  .section::after {
    content: "";
    background-image: url('../assets/element/conveyor.svg');
    background-size: 100% 100%;
    background-repeat: no-repeat;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: auto;
    aspect-ratio: 1 / 1;
    transform: translateY(50%);
  }
  .titleFont {
    font-family: 'Gill Sans', sans-serif;
    font-weight: 400;
    font-style: normal;
    color: white;
    font-size: 6rem;
    text-align: center;
    text-transform: uppercase;
  }
  .textFont {
    font-family: 'Palatino', sans-serif;
    font-weight: 400;
    font-style: normal;
    color: white;
    font-size: 2.5rem;
  }
}
@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
